1. 게임 초기화
pygame.init()


2. 게임창 옵션 설정
size = [400, 600]
screen = pygame.display.set_mode(size) 
-> 창의 크기 설정
   - size변수를 리스트형태로 저장 & 지정한 사이즈를 넣어서 screen이라는 변수로 저장
   - '4-4. 그리기'에서 사용해야하므로 screen이라는 변수로 저장하는 것이다.

title = 'My Game'
pygame.display.set_caption(title)
-> 게임 이름 설정

3. 게임 내 필요한 설정
clock = pygame.time.Clock()
-> clock변수에 시계를 만들어서 저장 -> FPS설정 & 추가적인 기능 추가 가능

black = (0, 0, 0)

class obj :
     def __init__(self) :
          self.x = 0
          self.y = 0
          self.move = 0
     def put_img(self, address) :
          if address[-3: ] == 'png' :
               self.img = pygame.image.load(address).convert_alpha()
          else :
               self.img = pygame.image.load(address)
               self.sx, self.sy = self.img.get_size()
     def change_size(self, sx, sy) :
          self.img = pygame.transform.scale(self.img, (sx, sy))
          self.sx, self.sy = self.img.get_size()
     def show(self) :
          screen.bilt(self.img, (self.x, self.y))

ss = obj()
ss.put_img('C:/Temp/ss.png')
ss.change_size(50, 80)
ss.x = round(size[0] / 2) - round(ss.sx / 2)
ss.y = size[1] - 5 - ss.sy
ss.move = 5

ss = pygame.image.load('C:/Temp/ss.png').convert_alpha()    -> 이미지 불러오기 & ss변수에 저장
ss = pygame.transform.scale(ss, (50, 80))            -> 이미지의 크기를 보기 좋게 바꾸기 위한 코드
ss_sx, ss_sy = ss.get_size()                                -> 이미지의 크기의 x, y값이 튜플 형태로 나오고 이를 ss_sx, ss_sy로 받아주면 각각의 변수에 저장된다
ss_x = round(size[0] / 2) - round(ss.sx / 2)          -> 이미지의 위치 : 가운데에 두기를 원함 / x좌표는 창의 가로크기의 절반으로 설정
ss_y = size[1] - 5 - ss_sy                                  -> 이미지의 위치 : 이미지의 y좌표는 바닥에서 살짝 위로 설정
                                                                  -> 위와 같이 x, y좌표를 설정하면 창에서 아주 조금밖에 보이지 않는다 
                                                                     why? 이때의 x, y좌표는 이미지의 맨 왼쪽 위가 기준이기 때문이다. 
                                                                     그러므로 이미지의 사이즈만큼 추가적으로 보정을 해주어야 한다!
                                                                  -> ss_sx의 절반. 즉, 이미지 가로 크기의 절반을 빼주어서 가운데로 올수 있게 한다!
                                                                  -> ss_sy 이미지의 크기 만큼 올려주면 된다!
                                              

4. 메인 이벤트 (while문으로 구성)
SB = 0     -> 비상탈출을 위한 변수 설정)
while SB == 0 :


   4-1. FPS설정
   clock.tick(60) -> FPS를 60으로 설정한다 = 1초에 60번 while문이 돌도록 하겠다       
   

   4-2. 각종 입력 감지
   for event in pygame.event.get() :       -> 실시간으로 키보드나 마우스의 동작을 받아오는 함수
        if event.type == pygame.QUIT :   -> 마우스나 키보드의 입력은 여러개가 동시에 발생할 수 있다 
            SB = 1                                      그러므로, 리스트 형태로 정리한다!
                                                      -> 게임 창의 X키를 누르면 SB가 1로변하면서 while문을 빠져나오고,
                                                           게임이 종료된다!
   4-3. 입력, 시간에 따른 변화


   4-4. 그리기
   screen.fill(black)       -> 게임에 필요한 설정에 black변수에 RGB값 (0, 0, 0)을 지정해주었다
                               -> black을 fill함수에 집어넣으면 검은 배경화면이 된다.
   screen.blit(ss, (ss_x,ss_y) -> 3에서 설정한 이미지의 좌표를 넣어준다

   4-5. 업데이트
   pygame.display.flip()  -> flip()함수를 써서 업데이트를 해주어야지 검은색 배경화면이 나타난다!


5. 게임종료
pygame.quit()