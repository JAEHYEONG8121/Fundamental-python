1. 게임 초기화
pygame.init()


2. 게임창 옵션 설정
size = [400, 600]
screen = pygame.display.set_mode(size) 
-> 창의 크기 설정
   - size변수를 리스트형태로 저장 & 지정한 사이즈를 넣어서 screen이라는 변수로 저장
   - '4-4. 그리기'에서 사용해야하므로 screen이라는 변수로 저장하는 것이다.

title = 'My Game'
pygame.display.set_caption(title)
-> 게임 이름 설정

3. 게임 내 필요한 설정
clock = pygame.time.Clock()
-> clock변수에 시계를 만들어서 저장 -> FPS설정 & 추가적인 기능 추가 가능

black = (0, 0, 0)

class obj :
     def __init__(self) :
          self.x = 0
          self.y = 0
          self.move = 0
     def put_img(self, address) :
          if address[-3: ] == 'png' :
               self.img = pygame.image.load(address).convert_alpha()
          else :
               self.img = pygame.image.load(address)
               self.sx, self.sy = self.img.get_size()
     def change_size(self, sx, sy) :
          self.img = pygame.transform.scale(self.img, (sx, sy))
          self.sx, self.sy = self.img.get_size()
     def show(self) :
          screen.bilt(self.img, (self.x, self.y))

ss = obj()
ss.put_img('C:/Temp/ss.png')
ss.change_size(50, 80)
ss.x = round(size[0] / 2) - round(ss.sx / 2)
ss.y = size[1] - 5 - ss.sy
ss.move = 5
left_go = False
right_go = False
space_go = False
m_list = []
k = 0
                                              

4. 메인 이벤트 (while문으로 구성)
SB = 0     -> 비상탈출을 위한 변수 설정)
while SB == 0 :


   4-1. FPS설정
   clock.tick(60) -> FPS를 60으로 설정한다 = 1초에 60번 while문이 돌도록 하겠다       
   

   4-2. 각종 입력 감지
   for event in pygame.event.get() :       -> 실시간으로 키보드나 마우스의 동작을 받아오는 함수
        if event.type == pygame.QUIT :   -> 마우스나 키보드의 입력은 여러개가 동시에 발생할 수 있다, 그러므로, 리스트 형태로 정리한다! 
            SB = 1                                 -> 게임 창의 X키를 누르면 SB가 1로변하면서 while문을 빠져나오고, 게임이 종료된다!    
        if event.type == pygame.KEYDOWN :    -> 이렇게 코딩하면 버튼을 한 번 누를 때만 이동하고, 꾹 눌렀을 때는 부드럽게 움직이지 못한다!
             if event.key == pygame.K_LEFT :      -> 버튼을 누를 때마다 이 조건문이 한 번씩 실행되기 때문이다!
                  left_go = True                         
             elif event.key == pygame.K_RIGHT :
                  right_go = True 
             elif event.key == pygame.K_SPACE :
                  space_go = True    
        elif event.type == pygame.KEYUP :        -> 버튼을 누르지 않은 상태에 대해서도 코딩해줘야한다!
               if event.key == pygame.K_LEFT :     -> left_go, right_go 변수를 설정하여 True, False상태로 바꿔가며 버튼이 눌렸을 때와 눌리지 않았을 때를 구분해준다!
                    left_go = False       
               elif event.key == pygame.K_RIGHT :
                    right_go = False  
                elif event.key == pygame.K_SPACE :
                  space_go = False       


   4-3. 입력, 시간에 따른 변화
   if left_go == True :                                  -> 비행선이 버튼이 눌렸을 때 좌우로 움직이게 하는 코드
       ss.x -= ss.move                                   -> 그러나, 왼쪽, 오른쪽모두 창 밖으로 벗어나면 안된다!
       if ss.x <= 0 :                                       ->  왼쪽, 오른쪽 각각 if문을 추가하여 왼쪽 끝과 오른쪽 끝에서 멈출 수 있도록 만들어준다!
           ss.x = 0
   elif right_go == True :
       ss.x += ss.move
       if ss.x >= size[0] - ss.sx :
           ss.x = size[0] - ss.sx
   
   if space_go == True & k % 8 == 0 :            -> 스페이스 버튼이 눌렸을 때, 미사일 객체를 생성한 것이다 / k의 초기값을 0으로 설정해두고, 이를 while문이 한번 돌 때마다 1씩 증가시킨다
       mm = obj()                                              미사일이 제한적으로 발사되는 상황을 만들기위해 k의 값을 8로 나눈 나머지가 0이될때 계속 미사일을 발사해주는 코드를 만들면, 미사일이 무한정으로 발사되지 않는다!
       mm.put_img('C:/Temp/mm.png')             -> 미사일 객체의 크기의 설정은 아주 중요하다
       mm.change_size(5, 15)
       mm.x = ss.x + (ss.x/2) - (mm.x/2)
       mm.y = ss.y - mm.sy - 10                        -> 미사일이 비행선의 위에서 발사되기위해서는 비행선의 y위치에서 미사일의 y크기만큼 빼주고
       mm.move = 12                                     -> But, 이렇게 하면 미사일이 하나밖에 안생긴다!
       m_list.append(mm)                                 -> 그러므로 m_list를 만들어서 미사일을 저장해준다
   k+=1
   d_list = []   -> delete_list 삭제할 미사일을 담는 리스트
   for i in range(len(m_list)) :
       m = m_list[i]
       m.y -= m.move                                -> 위 방향 마이너스 / 아래 방향 플러스
       if m.y <= -mm.sy :                                 -> 미사일의 y가 0이면 미사일의 왼쪽 위가 기준이므로 화면에서 보인다
            d_list.append(i)                                      그러므로, 0보다 미사일의 세로크기만큼 더 뺴준 -mm.sy로 설정하면 완전히 화면 밖으로 나간것을 구현할 수 있다!
       for d in d_list :
            del m_list[d]



   4-4. 그리기
   screen.fill(black)       -> 게임에 필요한 설정에 black변수에 RGB값 (0, 0, 0)을 지정해주었다
                               -> black을 fill함수에 집어넣으면 검은 배경화면이 된다.
   screen.blit(ss, (ss_x,ss_y) -> 3에서 설정한 이미지의 좌표를 넣어준다
   for m in m_list :       -> 미사일을 발사해서 보여주는 코드
        m.show()

   4-5. 업데이트
   pygame.display.flip()  -> flip()함수를 써서 업데이트를 해주어야지 검은색 배경화면이 나타난다!


5. 게임종료
pygame.quit()